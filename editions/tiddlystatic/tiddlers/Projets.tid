created: 20190808134832227
modified: 20190809133529701
title: Projets
type: text/vnd.tiddlywiki

Les projets sur lesquels je travaille en ce moment à titre perso

notes pour plus tard :

* Une idée pour que les noms de fichiers html générés (à rendre compatibles avec les liens de la version statique soient plus //chouettes//). Travailler sur ce bout de script et en faire une macro. Question associée : on en profite pour faire des vrais chemins le cas échéant : title `pages/chouette_page` donnerait `pages/chouette_page.html` au lieu de `pages_chouette_page.html` ?
** + L'arbre de sortie serait moins "tout à plat" et ça ouvre des perspectives
** - On va avoir des problèmes avec les liens internes du wiki (ou il va falloir faire une macro qui compte les / dans son titre pour déterminer combien il met de `..` avant `/wiki` pour construire les liens)

```
/*
Generate the filepath for saving a tiddler
Options include:
    extension: file extension to be added the finished filepath
    directory: absolute path of root directory to which we are saving
    pathFilters: optional array of filters to be used to generate the base path
    wiki: optional wiki for evaluating the pathFilters
*/
exports.generateTiddlerFilepath = function(title,options) {
    var self = this,
        directory = options.directory || "",
        extension = options.extension || "",
        filepath;
    // Check if any of the pathFilters applies
    if(options.pathFilters && options.wiki) {
        $tw.utils.each(options.pathFilters,function(filter) {
            if(!filepath) {
                var source = options.wiki.makeTiddlerIterator([title]),
                    result = options.wiki.filterTiddlers(filter,null,source);
                if(result.length > 0) {
                    filepath = result[0];
                }
            }
        });
    }
    // If not, generate a base pathname
    if(!filepath) {
        filepath = title;
        // If the filepath already ends in the extension then remove it
        if(filepath.substring(filepath.length - extension.length) === extension) {
            filepath = filepath.substring(0,filepath.length - extension.length);
        }
        // Remove any forward or backward slashes so we don't create directories
        filepath = filepath.replace(/\/|\\/g,"_");
    }
    // Don't let the filename start with a dot because such files are invisible on *nix
    filepath = filepath.replace(/^\./g,"_");
    // Remove any characters that can't be used in cross-platform filenames
    filepath = $tw.utils.transliterate(filepath.replace(/<|>|\:|\"|\||\?|\*|\^/g,"_"));
    // Truncate the filename if it is too long
    if(filepath.length > 200) {
        filepath = filepath.substr(0,200);
    }
    // If the resulting filename is blank (eg because the title is just punctuation characters)
    if(!filepath) {
        // ...then just use the character codes of the title
        filepath = "";
        $tw.utils.each(title.split(""),function(char) {
            if(filepath) {
                filepath += "-";
            }
            filepath += char.charCodeAt(0).toString();
        });
    }
    // Add a uniquifier if the file already exists
    var fullPath,
        count = 0;
    do {
        fullPath = path.resolve(directory,filepath + (count ? "_" + count : "") + extension);
        count++;
    } while(fs.existsSync(fullPath));
    // Return the full path to the file
    return fullPath;
};
```
